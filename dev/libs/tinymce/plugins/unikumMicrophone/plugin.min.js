

/*jshint unused:false */
/*global tinymce:true */

/*unik_mic_modal - umm - stageController - soundRecorder*/

var stageController = {};
var soundRecorder = {};
var audioPreviewObject = {};


/**
 * Example plugin that adds a toolbar button and menu item.
 */
tinymce.PluginManager.add('unikumMicrophone', function(editor, url) {
	// Add a button that opens a window
	editor.addButton('unikumMicrophone', {
    icon: true,
    image: url + "/img/micicon.png",
    tooltip: 'Spela in ljud',
		onclick: function() {
			// Open window
			editor.windowManager.open({
				html: '<div id="unik_mic_modal"></div>',
				width: 600,
				height: 450,
			});


			if (!navigator.getUserMedia) {
	      navigator.getUserMedia = navigator.getUserMedia ||
	                               navigator.webkitGetUserMedia ||
	                               navigator.mozGetUserMedia ||
	                               navigator.msGetUserMedia;
	    };
			//Is recording supported?
			renderUnikumMicrophone(editor, function() {
				if (navigator.getUserMedia) { // it is
					$.get('/libs/tinymce/plugins/unikumMicrophone/lame.min.js', function () {
						stageController.transitionStage(0);
					});
				} else { // It isn't

					//Is it an IOS unit? (iphone/Ipad)
					if((navigator.userAgent.match(/iPhone/i)) || (navigator.userAgent.match(/iPad/i))) {
						stageController.transitionStage(5);
					} else {
						stageController.transitionStage(4);
					}
				}
			});


		}
	});

	editor.on("touchstart click", function (e) {
		//Open modal to edit audioclip
		if (e.target.classList.contains('unikum_audio')) {
			editor.windowManager.open({
				html: '<div id="unik_mic_modal"></div>',
				width: 600,
				height: 450,
			});
			renderUnikumMicrophone(editor, function() {
				audioPreviewObject.editorElement = e.target;
				stageController.transitionStage(3);
				audioPreviewObject.setBlobUrl(e.target.getAttribute('data-url'));
				audioPreviewObject.setName(e.target.getAttribute('data-name'));
				$('.record_namechangeinput').val(audioPreviewObject.name);
				$('.record_namechangeinput').focus();
			});


		}
	});

});

/**
 * Handles the audiopreview, its blobs and playback
 */
 audioPreviewObject = {
	 init: function(element) {
		 this.element = element;
		 this.reset();
		 $(this.element).find('.uap_playstatus_btn_wrapper').on('click', function() {
				audioPreviewObject.audio.onended = function(e){
			    audioPreviewObject.stopPlaying();
			  };
				if (!audioPreviewObject.audio.paused) {
					audioPreviewObject.stopPlaying();
				} else {
					audioPreviewObject.startPlaying();
				}
     });
	 },

	 reset: function() {
		 this.blob = undefined;
		 this.blobUrl = undefined;
		 this.name = 'Ljudklipp';
		 this.audio = undefined;
		 this.tickInterval = undefined;
		 this.setName(this.name);
	 },

	 giveName: function() {
		 this.name = $('.record_nameinput').val();
		 this.setName(this.name);
	 },

	 setName: function(name) {
		 this.name = name;
		 $('.record_nameinput').val(this.name);
	 },

	 setBlob: function(blob) {
		 this.reset();
		 this.blob = blob;
		 this.blobUrl = (window.URL || window.webkitURL).createObjectURL(this.blob);
		 this.audio = new Audio(this.blobUrl);
	 },

	 setBlobUrl: function(url) {
		 this.reset();
		 this.blobUrl = url;
		 this.audio = new Audio(this.blobUrl);
		 console.log(this.audio)
	 },

	 startTick: function() {
		 if (!this.audio.paused) {
			 this.tickInterval = setInterval(this.tick.bind(this),1000);
		 }
	 },

	 updateTimeAndProgress: function(timeInSeconds) {
		 var progressInPercent = Math.round((timeInSeconds/this.audio.duration)*100);
		//  if (timeInSeconds < 1) {timeInSeconds = ''};
		 $(this.element).find('.uap_track_progress').css('width', progressInPercent+'%');
		 $(this.element).find('.uap_track_time').html(soundRecorder.secondsToMinutes(timeInSeconds));
		 $(this.element).find('.uap_track_duration').html(soundRecorder.secondsToMinutes(Math.round(this.audio.duration)));
	 },

	 tick: function() {
		 if (this.audio) {
			 if (this.audio.currentTime > 0 && !this.audio.paused) {
				 var playedTimeInSeconds = Math.round(audioPreviewObject.audio.currentTime);
				 this.updateTimeAndProgress(playedTimeInSeconds);
			 } else {
				 this.stopPlaying();
			 }
		 }
	 },

	 endTick: function() {
		 clearInterval(this.tickInterval);
	 },

	 startPlaying: function() {
		 this.updateTimeAndProgress(0);
		 audioPreviewObject.audio.play();
		 this.startTick();
		 $(this.element).addClass('unikum_audioplayer__isPlaying');
	 },

	 stopPlaying: function() {
		 this.updateTimeAndProgress(0);
		 $(this.element).removeClass('unikum_audioplayer__isPlaying');
		 audioPreviewObject.audio.pause();
		 this.endTick();
	 },

	 saveAudioFile:function () {
     var a = document.createElement("a");
     document.body.appendChild(a);
     a.style = "display: none";
     a.href = this.blobUrl;
     a.download = this.name;
     a.click();
	 }
 }

/**
 * Renders the modal and fills it with the template and a few handlers, triggers viewLogic
 */

function renderUnikumMicrophone(editor, cb) {
	$.get('/libs/tinymce/plugins/unikumMicrophone/view/modal.html', function (template) {

    $('#unik_mic_modal').html(template);
		$('#umm_rec_btn_start').on('click', function(){stageController.transitionStage(1)});
		$('#umm_btn_restart').on('click', function(){
			stageController.transitionStage(0);
			soundRecorder.reset();});
		$('#umm_btn_cancel').on('click', function(){parent.tinymce.activeEditor.windowManager.close();});

		//Simulate file upload click
		$('#umm_rec_btn_upload').on('click', function(){
			$('#umm_fileinput').val('');
			$('#umm_fileinput_label').trigger("click");
		});


		//Watch for filechange in fileinput (upload)
    $("#umm_fileinput").change(function () {
      var file = $("#umm_fileinput")[0].files[0];
			var reader = new FileReader();

			reader.addEventListener("load", function () {
				audioPreviewObject.setBlobUrl(reader.result);
				audioPreviewObject.setName(file.name);
				setTimeout(function(){
					$('#umm_rec_btn_upload').removeClass('umm_rec_btn_uploading');
				},1000)
				stageController.transitionStage(2);
			},false);

			reader.addEventListener("error", function () {
				audioPreviewObject.reset();
				$('#umm_rec_btn_upload').removeClass('umm_rec_btn_uploading');
				console.log('error uploading file');
			});

			if (file) {
				reader.readAsDataURL(file);
				$('#umm_rec_btn_upload').addClass('umm_rec_btn_uploading');
			}
    });


		setTimeout(function() {
			//Remove (some) tinymce styling on the modal
	  	editor.windowManager.windows[0].$el.removeClass('mce-container');
	  	editor.windowManager.windows[0].$el.addClass('unikum_mcemodal_fill');
			editor.windowManager.windows[0].$el.find(".mce-foot").css('display', 'none');
			editor.windowManager.windows[0].$el.find(".mce-window-head").css('display', 'none');
			audioPreviewObject.init($('.unikum_audioplayer'));
	    runViewLogic(editor);
			return cb();
		},0)


  });

}


/**
 * Handles the modals different states/stages
 */

function runViewLogic(editor) {
	stageController = {
	  buttonWrapperEl: $('#umm_buttons'),
	  stages: [
	    {
        label: 'Record or upload?',
	      wrapperEl: $('#umm_stage0'),
        run: function(){soundRecorder.reset();}
	    },
	    {
        label: 'Record',
	      wrapperEl: $('#umm_stage1'),
        run: function() {
					$('#unik_mic_modal').addClass('isRecordStage');
					$('#umm_start_countdown').on('click', function(){
						soundRecorder.startCountdown();
					});
					$('#umm_stop_recording').on('click', function(){
						console.log(soundRecorder.recordingLength);
						if (soundRecorder.recordingLength > 0) {
							soundRecorder.stopRecording(function(blob){
								if (blob) {audioPreviewObject.setBlob(blob);}
								stageController.transitionStage(2);
							});
						}
					});
					$('.umm_cancel_recording').on('click', function(){
						soundRecorder.reset();
						soundRecorder.stopRecording();
						stageController.transitionStage(1);
					})
				}
	    },
	    {
        label: 'Preview/insert',
	      wrapperEl: $('#umm_stage2'),
        run: function() {
					$('.record_nameinput').focus();
					$('#umm_insert_recording').on('click', function() {
						audioPreviewObject.giveName();
						stageController.insertAudio(audioPreviewObject.blobUrl, audioPreviewObject.name)
					});
					$('.record_nameinput').on('keyup', function() {
						$(this).height( $(this).prop("scrollHeight")+'px' );
					});
					$('.umm_download_recording').on('click', function() {
						audioPreviewObject.saveAudioFile();
					});
					$('.umm_cancel_recording').on('click', function(){
						soundRecorder.reset();
						soundRecorder.stopRecording();
						stageController.transitionStage(1);
					})
				}
	    },
	    {
        label: 'Edit audioclip',
	      wrapperEl: $('#umm_stage3'),
        run: function() {
					$('#umm_update_recording').on('click', function() {
						stageController.changeAudio(audioPreviewObject.blobUrl, $('.record_namechangeinput').val())
					});
					$('.record_namechangeinput').on('keyup', function() {
						$(this).height( $(this).prop("scrollHeight")+'px' );
					});
					$('#umm_delete_recording').on('click', function() {
						audioPreviewObject.editorElement.remove();
						var win = editor.windowManager.getWindows()[0];
						win.close();
					});
					$('.umm_download_recording').on('click', function() {
						audioPreviewObject.saveAudioFile();
					});
					$('.umm_cancel_recording').on('click', function(){
						soundRecorder.reset();
						soundRecorder.stopRecording();
						stageController.transitionStage(1);
					})
				}
	    },
			{
        label: 'Not supported view',
	      wrapperEl: $('#umm_stage4'),
        run: function() {
					$('.umm_cancel_recording').on('click', function(){
						var win = editor.windowManager.getWindows()[0];
						win.close();
					});
					$('.umm_open_video_recorder').on('click', function(){
						$('#umm_fileinput').val('');
						$('#umm_fileinput_label').trigger("click");
					});
				}
	    },
			{
        label: 'IOS Special',
	      wrapperEl: $('#umm_stage5'),
        run: function() {
					$('.umm_open_video_recorder').on('click', function(){
						// $("#umm_fileinput").attr("capture", "camcorder");
						// $("#umm_fileinput").attr("accept", "video/*;capture=camcorder");
						$('#umm_fileinput').val('');
						$('#umm_fileinput_label').trigger("click");
					})
					$('.umm_cancel_recording').on('click', function(){
						var win = editor.windowManager.getWindows()[0];
						win.close();
					})
				}
	    }
	  ],
	  insertAudio: function(blobUrl, name) {
      //insert Audio
			var win = editor.windowManager.getWindows()[0];
			//win.getContentWindow().document.getElementById('content').value
			editor.insertContent(stageController.insertElementTemplate(blobUrl, name));
			win.close();
	  },
		changeAudio: function(blobUrl, name) {
      //change/save Audio
			var win = editor.windowManager.getWindows()[0];
			console.log(audioPreviewObject.editorElement)
			//win.getContentWindow().document.getElementById('content').value
			$(audioPreviewObject.editorElement).replaceWith(stageController.insertElementTemplate(blobUrl, name));
			win.close();
	  },
		insertElementTemplate: function(blobUrl, name) {
			var duration = soundRecorder.secondsToMinutesAlt(Math.round(audioPreviewObject.audio.duration));
			return `
				<div class="unikum_audio mceNonEditable" data-duration="${duration}" data-url="${blobUrl}" data-name="${name}">
					<div class="uap_circle"></div>
		      <div class="uap_txtinfo">${name}</div>
					<span class="uap_duration">${duration}</span>
				</div>
			`
		},
	  transitionStage: function(nStage, event) {
	    // Change view/stage
	    stageController.stages.forEach(function(stage){
	      stage.wrapperEl.removeClass('isShowing');
	    });
	    stageController.stages[nStage].wrapperEl.addClass('isShowing');
      //run stage function
			$('#unik_mic_modal').removeClass();
      if (stageController.stages[nStage].run) {
        stageController.stages[nStage].run();
      }

	  }
	};
}


/**
 * Handles actual sound recording
 */


soundRecorder = {

  reset: function(){
    this.timeElement = $('#umm_record_time');
    this.timer = 'START';
    this.stream = undefined;
    this.audioCtx = undefined;
    this.leftChannel = [];
    this.rightChannel = [];
    this.recordingLength = 0;
    this.sampleRate = undefined;
    this.volume = undefined;
    this.recorder = undefined;
    this.bufferSize = 2048;

    if (this.timeInterval) {
      clearInterval(this.timeInterval);
    }
		this.timeInterval = undefined;
		this.setTimer(this.timer);
    this.clearCountdown();

  },

  record: function(stream) {
    soundRecorder.stream = stream;
    soundRecorder.audioCtx = new AudioContext();
    audioInput = soundRecorder.audioCtx.createMediaStreamSource(stream);

    soundRecorder.sampleRate = soundRecorder.audioCtx.sampleRate;
    soundRecorder.volume = soundRecorder.audioCtx.createGain();
    soundRecorder.recordingLength = 0;

    audioInput.connect(soundRecorder.volume);

    soundRecorder.recorder = soundRecorder.audioCtx.createScriptProcessor(
      soundRecorder.bufferSize, 1, 1);

    soundRecorder.recorder.onaudioprocess = function(stream){
			var left = stream.inputBuffer.getChannelData(0);
      //var right = stream.inputBuffer.getChannelData(1);
      soundRecorder.recordingLength += soundRecorder.bufferSize;
			soundRecorder.leftChannel.push (new Float32Array (left));
      // soundRecorder.rightChannel.push (new Float32Array (right));
      soundRecorder.show_some_data(left,1,'left channel');
    }

    soundRecorder.volume.connect (soundRecorder.recorder);
    soundRecorder.recorder.connect (soundRecorder.audioCtx.destination);
    soundRecorder.startTimer();

  },

  startRecording: function() {
    if (navigator.getUserMedia){
        navigator.getUserMedia({audio:true},
          function(stream) {
            soundRecorder.record(stream);
          },
          function(e) {
            console.log('Det går inte att starta mikrofonen.');
          }
        );
    } else {
      console.log('Ljudinspelning stöds inte av din webbläsare');
    }
  },

  stopRecording: function(cb) {
    var returnValue;
    soundRecorder.stopTimer();
    if (soundRecorder.audioCtx && soundRecorder.audioCtx.state !== 'closed') {
      var leftBuffer = soundRecorder.mergeBuffers ( soundRecorder.leftChannel, soundRecorder.recordingLength );
      // var rightBuffer = soundRecorder.mergeBuffers ( soundRecorder.rightChannel, soundRecorder.recordingLength );
      // var interleaved = soundRecorder.interleave ( leftBuffer, rightBuffer );
			var wav = soundRecorder.createWAV(leftBuffer); //createWav(interleaved)
      var mp3 = soundRecorder.createMp3(wav, function(blob){
				cb(blob);
			});

      soundRecorder.stream.getAudioTracks()[0].stop()
      soundRecorder.audioCtx.close();
			console.log(mp3,wav)
      returnValue = mp3;
    }
    soundRecorder.reset();
  },


  startTimer: function() {
    var start = new Date;
    soundRecorder.timer = '00:00';
    soundRecorder.setTimer();
    soundRecorder.timeInterval = setInterval(function() {
      var total_seconds = (new Date - start) / 1000;
      total_seconds = total_seconds % 3600;
			soundRecorder.timer = soundRecorder.secondsToMinutes(total_seconds);
      soundRecorder.setTimer();
    }, 1000);
  },

  stopTimer: function() {
    soundRecorder.timer = 'START';
    soundRecorder.setTimer();
		soundRecorder.clearCountdown();
    clearInterval(soundRecorder.timeInterval);
  },

  setTimer: function() {
    soundRecorder.timeElement.html(soundRecorder.timer);
  },

	st1: undefined,
	st2: undefined,
	countDownInterval: undefined,
	clearCountdown: function() {
		$('.text').html('');
		$('#unik_mic_modal').addClass('isCountdown');
	  $('#unik_mic_modal').removeClass('isRecording');
	  soundRecorder.timeElement.removeClass('isShowing');
		if(soundRecorder.countDownInterval) {clearInterval(soundRecorder.countDownInterval);}
	  if(soundRecorder.st1) {clearInterval(soundRecorder.st1);}
	  if(soundRecorder.st2) {clearInterval(soundRecorder.st2);}
	},

	startCountdown: function() {
		soundRecorder.clearCountdown();

	  function replaceCountdown(n) {
	    var clone = $('.countdown').clone();
	    clone.html(n);
	    $('.countdown').replaceWith(clone);
	  }

		var timeleft = 3;
		replaceCountdown(timeleft);
		$('.text').html('Räknar ner');
	  soundRecorder.countDownInterval = setInterval(function(){
	    timeleft--;
	    replaceCountdown(timeleft);
	    if(timeleft <= 0) {
	      clearInterval(soundRecorder.countDownInterval);
	    }
	  },1500);
	  soundRecorder.st1 = setTimeout(function(){
			soundRecorder.startRecording();
	    $('.countdown').html('');
			$('#unik_mic_modal').removeClass('isCountdown');
	    $('#unik_mic_modal').addClass('isRecording');
	    $('.text').html('Nu spelas din röst in!');
	    clearInterval(soundRecorder.st1);
	  },4500);
	  soundRecorder.st2 = setTimeout(function() {
	    soundRecorder.timeElement.addClass('isShowing');
	    clearInterval(soundRecorder.st2);
	  },6500);

	},

  mergeBuffers: function(recBuffers, recLength){
    var result = new Float32Array(recLength);
    var offset = 0;
    for (var i = 0; i < recBuffers.length; i++){
      result.set(recBuffers[i], offset);
      offset += recBuffers[i].length;
    }
    return result;
  },

  floatTo16BitPCM: function(output, offset, input){
    for (var i = 0; i < input.length; i++, offset+=2){
      var s = Math.max(-1, Math.min(1, input[i]));
      output.setInt16(offset, s < 0 ? s * 0x8000 : s * 0x7FFF, true);
    }
  },

  writeString: function(view, offset, string){
    for (var i = 0; i < string.length; i++){
      view.setUint8(offset + i, string.charCodeAt(i));
    }
  },

  show_some_data: function(given_typed_array, num_row_to_display, label) {
      var size_buffer = given_typed_array.length;
      var max_index = num_row_to_display;
      for (var index = 0; index < max_index && index < size_buffer; index += 1) {
				var val = Math.round(given_typed_array[index] * 100);
				if (val !== 0 && val > 0) {
					console.log(val)
					$('.masker').height(val*1.5+'%');
					$('.indicator').height(50+val+'%');
				}
      }
  },

  createWAV: function(samples){

    var buffer = new ArrayBuffer(44 + samples.length * 2);
    var view = new DataView(buffer);

    soundRecorder.writeString(view, 0, 'RIFF');
    view.setUint32(4, 36 + samples.length * 2, true);
    soundRecorder.writeString(view, 8, 'WAVE');
    soundRecorder.writeString(view, 12, 'fmt ');
    view.setUint32(16, 16, true);
    view.setUint16(20, 1, true);
		// view.setUint16(22, 2, true); STEREO
    view.setUint16(22, 1, true); //Mono
    view.setUint32(24, soundRecorder.sampleRate, true);
		//view.setUint32(28, soundRecorder.sampleRate * 4, true); STEREO
    view.setUint32(28, soundRecorder.sampleRate * 2, true); //Mono
		// view.setUint16(32, 4, true); Stereo
    view.setUint16(32, 2, true); //Mono
    view.setUint16(34, 16, true);
    soundRecorder.writeString(view, 36, 'data');
    view.setUint32(40, samples.length * 2, true);

    soundRecorder.floatTo16BitPCM(view, 44, samples);


    return new Blob ( [ view ], { type : 'audio/wav' } );
  },

	createMp3: function(blob, returnNewBlob) {

		var fileReader = new FileReader();
		fileReader.onload = function(){
			var arrayBuffer = this.result;

			// ######### encoding wav to mp3
			var mp3Encoder, maxSamples = 1152, wav, samplesLeft, config, dataBuffer, samplesRight;
			var clearBuffer = function () {
				dataBuffer = [];
			};
			var appendToBuffer = function (mp3Buf) {
				dataBuffer.push(new Int8Array(mp3Buf));
			};
			var encode = function (arrayBuffer, callback) {
				clearBuffer();
			  wav = lamejs.WavHeader.readHeader(new DataView(arrayBuffer));
			  console.log('wave:', wav);
			  if (!wav) {
			    self.postMessage({cmd: 'error', msg: 'Specified file is not a Wave file'});
			    return;
			  }
			  var dataView = new Int16Array(arrayBuffer, wav.dataOffset, wav.dataLen / 2);
			  samplesLeft = wav.channels === 1 ? dataView : new Int16Array(wav.dataLen / (2 * wav.channels));
			  samplesRight = wav.channels === 2 ? new Int16Array(wav.dataLen / (2 * wav.channels)) : undefined;
			  if (wav.channels > 1) {
			    for (var i = 0; i < samplesLeft.length; i++) {
			      samplesLeft[i] = dataView[i * 2];
			      samplesRight[i] = dataView[i * 2 + 1];
			    }
			  }
			  mp3Encoder = new lamejs.Mp3Encoder(wav.channels, wav.sampleRate, 96);
			  var remaining = samplesLeft.length;
			  for (var i = 0; remaining >= maxSamples; i += maxSamples) {
			    var left = samplesLeft.subarray(i, i + maxSamples);
			    var right;
			    if (samplesRight) {
			      right = samplesRight.subarray(i, i + maxSamples);
			    }
			    var mp3buf = mp3Encoder.encodeBuffer(left, right);
			    appendToBuffer(mp3buf);
			    remaining -= maxSamples;
			    var progress = (1 - remaining / samplesLeft.length);
			  }
				if (!wav) {return;}
			  var mp3buf = mp3Encoder.flush();
			  appendToBuffer(mp3buf);
				callback(dataBuffer)
				// Done encoding wav to mp3
				clearBuffer(); //free up memory
			};
			// ######### stop encoding wav to mp3

			encode(arrayBuffer, function(dataBuffer) {
				//Converting to Mp3
				var newBlob = new Blob(dataBuffer, {type: 'audio/mp3'});
				var newBlobUrl = window.URL.createObjectURL(newBlob);

				var a = document.createElement("a");
	      document.body.appendChild(a);
	      a.style = "display: none";
	      a.href = newBlobUrl;
	      a.download = audioPreviewObject.name+'.mp3';
	      a.click();

				returnNewBlob(newBlob);
			});

		};

		fileReader.readAsArrayBuffer(blob);

	},

	Uint8ArrayToFloat32Array: function(u8a) {
		var f32Buffer = new Float32Array(u8a.length);
		for (var i = 0; i < u8a.length; i++) {
			var value = u8a[i << 1] + (u8a[(i << 1) + 1] << 8);
			if (value >= 0x8000) value |= ~0x7FFF;
			f32Buffer[i] = value / 0x8000;
		}
		return f32Buffer;
	},

	encode64: function(buffer) {
		var binary = '',
			bytes = new Uint8Array(buffer),
			len = bytes.byteLength;

		for (var i = 0; i < len; i++) {
			binary += String.fromCharCode(bytes[i]);
		}
		return window.btoa(binary);
	},

	parseWav: function(wav) {
		var readInt = function(i, bytes) {
			var ret = 0,
				shft = 0;

			while (bytes) {
				ret += wav[i] << shft;
				shft += 8;
				i++;
				bytes--;
			}
			return ret;
		};
		if (readInt(20, 2) != 1) throw 'Invalid compression code, not PCM';
		if (readInt(22, 2) != 1) throw 'Invalid number of channels, not 1';
		return {
			sampleRate: readInt(24, 4),
			bitsPerSample: readInt(34, 2),
			samples: wav.subarray(44)
		};
	},

  interleave: function(leftChannel, rightChannel){
    var length = leftChannel.length + rightChannel.length;
    var result = new Float32Array(length);

    var inputIndex = 0;

    for (var index = 0; index < length; ){
      result[index++] = leftChannel[inputIndex];
      result[index++] = rightChannel[inputIndex];
      inputIndex++;
    }
    return result;
  },

	prettyTimeString: function(num) {
		return ( num < 10 ? "0" : "" ) + num;
	},

	secondsToMinutes: function(seconds) {
		var minutes = Math.floor(seconds / 60);
		seconds = Math.floor(seconds % 60);
		minutes = this.prettyTimeString(minutes);
		seconds = this.prettyTimeString(seconds);
		return minutes + ":" + seconds;
	},

	secondsToMinutesAlt: function(seconds) {
		var minutes = Math.floor(seconds / 60);
		if (minutes < 1) {
			return seconds + ' sekunder';
		}
		return '~ ' + minutes + ' minuter';
	}

};
