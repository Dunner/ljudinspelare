

/*jshint unused:false */
/*global tinymce:true */

/*unik_mic_modal - umm - stageController - soundRecorder*/

var stageController = {};
var soundRecorder = {};
// var PreviewPlayer = {};
// var MP3Encoder = {};
// var MP3Recorder = {};
// var MP3Converter = {};

//Add TINYMCE toolbar button, and handle clicks on it
tinymce.PluginManager.add('unikumMicrophone', function(editor, url) {
	// Add a button that opens a window
	editor.addButton('unikumMicrophone', {
    icon: true,
    image: url + "/img/micicon.png",
    tooltip: 'Spela in ljud',
		onclick: function() {
			// Open window
			editor.windowManager.open({
				html: '<div id="unik_mic_modal"></div>',
				width: 600,
				height: 450,
			});
			renderUnikumMicrophone(editor, function() {});
		}
	});

	editor.on("touchstart click", function (e) {
		//Open modal to edit audioclip
		if (e.target.classList.contains('unikum_audio')) {
			editor.windowManager.open({
				html: '<div id="unik_mic_modal"></div>',
				width: 600,
				height: 450,
			});
			renderUnikumMicrophone(editor, function() {
        $.get('/libs/tinymce/plugins/unikumMicrophone/PreviewPlayer.js', function(){
          PreviewPlayer.init($('.unikum_audioplayer'));
          PreviewPlayer.editorElement = e.target;
          stageController.transitionStage(3);
          PreviewPlayer.setBlobUrl(e.target.getAttribute('data-url'));
          PreviewPlayer.setName(e.target.getAttribute('data-name'));
          $('.record_namechangeinput').val(PreviewPlayer.name);
          $('.record_namechangeinput').focus();
        });

			});
		}
	});

});


/**
 * Renders the modal and fills it with the template and a few handlers, triggers viewLogic
 */

function renderUnikumMicrophone(editor, cb) {
	$.get('/libs/tinymce/plugins/unikumMicrophone/view/modal.html', function (template) {

    $('#unik_mic_modal').html(template);
		$('#umm_rec_btn_start').on('click', function(){stageController.transitionStage(1)});
		$('#umm_btn_restart').on('click', function(){
			stageController.transitionStage(0);
			soundRecorder.reset();});
		$('#umm_btn_cancel').on('click', function(){parent.tinymce.activeEditor.windowManager.close();});

		//Simulate file upload click
		$('#umm_rec_btn_upload').on('click', function(){
			$('#umm_fileinput').val('');
			$('#umm_fileinput_label').trigger("click");
		});


		//Watch for filechange in fileinput (upload)
    $("#umm_fileinput").change(function () {
      var file = $("#umm_fileinput")[0].files[0];
			var reader = new FileReader();

			reader.addEventListener("load", function () {
				PreviewPlayer.setBlobUrl(reader.result);
				PreviewPlayer.setName(file.name);
				setTimeout(function(){
					$('#umm_rec_btn_upload').removeClass('umm_rec_btn_uploading');
				},1000)
				stageController.transitionStage(2);
			},false);

			reader.addEventListener("error", function () {
				PreviewPlayer.reset();
				$('#umm_rec_btn_upload').removeClass('umm_rec_btn_uploading');
				console.log('error uploading file');
			});

			if (file) {
				reader.readAsDataURL(file);
				$('#umm_rec_btn_upload').addClass('umm_rec_btn_uploading');
			}
    });


		setTimeout(function() {
			//Remove (some) tinymce styling on the modal
	  	editor.windowManager.windows[0].$el.removeClass('mce-container');
	  	editor.windowManager.windows[0].$el.addClass('unikum_mcemodal_fill');
			editor.windowManager.windows[0].$el.find(".mce-foot").css('display', 'none');
			editor.windowManager.windows[0].$el.find(".mce-window-head").css('display', 'none');
	    runViewLogic(editor);
			return cb();
		},0)


  });

}


/**
 * Handles the modals different states/stages
 */

function runViewLogic(editor) {
	stageController = {
	  buttonWrapperEl: $('#umm_buttons'),
	  stages: [
	    {
        label: 'Record or upload?',
	      wrapperEl: $('#umm_stage0'),
        run: function(){soundRecorder.reset();}
	    },
	    {
        label: 'Record',
	      wrapperEl: $('#umm_stage1'),
        run: function() {
					$('#unik_mic_modal').addClass('isRecordStage');
					$('#umm_start_countdown').on('click', function(){
						soundRecorder.startCountdown();
					});
					$('#umm_stop_recording').on('click', function(){
						// if (soundRecorder.recordingLength > 0) {
							soundRecorder.stopRecording(function(blob){
								if (blob) {PreviewPlayer.setBlob(blob);}
								stageController.transitionStage(2);
							});
						// }
					});
					$('.umm_cancel_recording').on('click', function(){
						soundRecorder.reset();
						stageController.transitionStage(1);
					})
				}
	    },
	    {
        label: 'Preview/insert',
	      wrapperEl: $('#umm_stage2'),
        run: function() {
					$('.record_nameinput').focus();
					$('#umm_insert_recording').on('click', function() {
						PreviewPlayer.giveName();
						stageController.insertAudio(PreviewPlayer.blobUrl, PreviewPlayer.name)
					});
					$('.record_nameinput').on('keyup', function() {
						$(this).height( $(this).prop("scrollHeight")+'px' );
					});
					$('.umm_download_recording').on('click', function() {
						PreviewPlayer.saveAudioFile();
					});
					$('.umm_cancel_recording').on('click', function(){
						soundRecorder.reset();
						stageController.transitionStage(1);
					})
				}
	    },
	    {
        label: 'Edit audioclip',
	      wrapperEl: $('#umm_stage3'),
        run: function() {
					$('#umm_update_recording').on('click', function() {
						stageController.changeAudio(PreviewPlayer.blobUrl, $('.record_namechangeinput').val())
					});
					$('.record_namechangeinput').on('keyup', function() {
						$(this).height( $(this).prop("scrollHeight")+'px' );
					});
					$('#umm_delete_recording').on('click', function() {
						PreviewPlayer.editorElement.remove();
						var win = editor.windowManager.getWindows()[0];
						win.close();
					});
					$('.umm_download_recording').on('click', function() {
						PreviewPlayer.saveAudioFile();
					});
					$('.umm_cancel_recording').on('click', function(){
						soundRecorder.reset();
						stageController.transitionStage(1);
					})
				}
	    },
			{
        label: 'Not supported view',
	      wrapperEl: $('#umm_stage4'),
        run: function() {
					$('.umm_cancel_recording').on('click', function(){
						var win = editor.windowManager.getWindows()[0];
						win.close();
					});
					$('.umm_open_video_recorder').on('click', function(){
						$('#umm_fileinput').val('');
						$('#umm_fileinput_label').trigger("click");
					});
				}
	    },
			{
        label: 'IOS Special',
	      wrapperEl: $('#umm_stage5'),
        run: function() {
					$('.umm_open_video_recorder').on('click', function(){
						// $("#umm_fileinput").attr("capture", "camcorder");
						// $("#umm_fileinput").attr("accept", "video/*;capture=camcorder");
						$('#umm_fileinput').val('');
						$('#umm_fileinput_label').trigger("click");
					})
					$('.umm_cancel_recording').on('click', function(){
						var win = editor.windowManager.getWindows()[0];
						win.close();
					})
				}
	    }
	  ],
	  insertAudio: function(blobUrl, name) {
      //insert Audio
			var win = editor.windowManager.getWindows()[0];
			//win.getContentWindow().document.getElementById('content').value
			editor.insertContent(stageController.insertElementTemplate(blobUrl, name));
			win.close();
	  },
		changeAudio: function(blobUrl, name) {
      //change/save Audio
			var win = editor.windowManager.getWindows()[0];
			//win.getContentWindow().document.getElementById('content').value
			$(PreviewPlayer.editorElement).replaceWith(stageController.insertElementTemplate(blobUrl, name));
			win.close();
	  },
		insertElementTemplate: function(blobUrl, name) {
			var duration = soundRecorder.secondsToMinutesAlt(Math.round(PreviewPlayer.audio.duration));
			return `
				<div class="unikum_audio mceNonEditable" data-duration="${duration}" data-url="${blobUrl}" data-name="${name}">
					<div class="uap_circle"></div>
		      <div class="uap_txtinfo">${name}</div>
					<span class="uap_duration">${duration}</span>
				</div>
			`
		},
	  transitionStage: function(nStage, event) {
	    // Change view/stage
	    stageController.stages.forEach(function(stage){
	      stage.wrapperEl.removeClass('isShowing');
	    });
	    stageController.stages[nStage].wrapperEl.addClass('isShowing');
      //run stage function
			$('#unik_mic_modal').removeClass();
      if (stageController.stages[nStage].run) {
        stageController.stages[nStage].run();
      }

	  }
	};
  if (
    navigator.mediaDevices.getUserMedia) {}
  else if (!navigator.getUserMedia) {
    navigator.getUserMedia = navigator.mediaDevices.getUserMedia ||
                             navigator.getUserMedia ||
                             navigator.webkitGetUserMedia ||
                             navigator.mozGetUserMedia ||
                             navigator.msGetUserMedia;
  };
  if (navigator.getUserMedia || navigator.mediaDevices.getUserMedia) { // it is
    $.get('/libs/tinymce/plugins/unikumMicrophone/mp3encoder.js');
    $.get('/libs/tinymce/plugins/unikumMicrophone/mp3converter.js');
    $.get('/libs/tinymce/plugins/unikumMicrophone/mp3recorder.js');
    $.get('/libs/tinymce/plugins/unikumMicrophone/PreviewPlayer.js', function(){
      PreviewPlayer.init($('.unikum_audioplayer'));
    });
    $.get('/libs/tinymce/plugins/unikumMicrophone/lame.min.js', function() {
      stageController.transitionStage(0);
    });
  } else { // It isn't
    //Is it an IOS unit? (iphone/Ipad)
    if((navigator.userAgent.match(/iPhone/i)) || (navigator.userAgent.match(/iPad/i))) {
      stageController.transitionStage(5);
    } else {
      stageController.transitionStage(4);
    }
  }
}


/**
 * Handles actual sound recording, timers & such
 */


soundRecorder = {

  reset: function(){
    this.timeElement = $('#umm_record_time');
    this.timer = 'START';
    $('.masker').height(0+'px');
    $('.indicator').height(0+'px');
    if (this.timeInterval) {clearInterval(this.timeInterval);}
		this.timeInterval = undefined;
    this.stopTimer();
		this.setTimer(this.timer);
    this.clearCountdown();
    if (this.recorder) {this.recorder.destroy();}
    this.recorder = new MP3Recorder({
      bitRate: 128
    });
  },

  startRecording: function() {
    this.startTimer()
    this.recorder.initialize()
    this.recorder.start();
  },

  stopRecording: function(cb) {
    this.recorder.stop();
    this.recorder.getMp3Blob(function(blob){
      cb(blob)
    })
    this.reset();
  },

  visualize: function(array) {
    var size_buffer = array.length;
    var max_index = 1;
    for (var index = 0; index < max_index && index < size_buffer; index += 1) {
      var val = Math.round(array[index] * 100);
      if (val !== 0 && val > 0) {
        console.log(val)
        $('.masker').height(val*1.5+'%');
        $('.indicator').height(50+val+'%');
      }
    }
  },

  startTimer: function() {
    var start = new Date;
    soundRecorder.timer = '00:00';
    soundRecorder.setTimer();
    soundRecorder.timeInterval = setInterval(function() {
      var total_seconds = (new Date - start) / 1000;
      total_seconds = total_seconds % 3600;
			soundRecorder.timer = soundRecorder.secondsToMinutes(total_seconds);
      soundRecorder.setTimer();
    }, 1000);
  },

  stopTimer: function() {
    soundRecorder.timer = 'START';
    soundRecorder.setTimer();
		soundRecorder.clearCountdown();
    clearInterval(soundRecorder.timeInterval);
  },

  setTimer: function() {
    soundRecorder.timeElement.html(soundRecorder.timer);
  },

	st1: undefined,
	st2: undefined,
	countDownInterval: undefined,
	clearCountdown: function() {
		$('.text').html('');
		$('#unik_mic_modal').addClass('isCountdown');
	  $('#unik_mic_modal').removeClass('isRecording');
	  soundRecorder.timeElement.removeClass('isShowing');
		if(soundRecorder.countDownInterval) {clearInterval(soundRecorder.countDownInterval);}
	  if(soundRecorder.st1) {clearInterval(soundRecorder.st1);}
	  if(soundRecorder.st2) {clearInterval(soundRecorder.st2);}
	},

	startCountdown: function() {
		soundRecorder.clearCountdown();

	  function replaceCountdown(n) {
	    var clone = $('.countdown').clone();
	    clone.html(n);
	    $('.countdown').replaceWith(clone);
	  }

		var timeleft = 3;
		replaceCountdown(timeleft);
		$('.text').html('Räknar ner');
	  soundRecorder.countDownInterval = setInterval(function(){
	    timeleft--;
	    replaceCountdown(timeleft);
	    if(timeleft <= 0) {
	      clearInterval(soundRecorder.countDownInterval);
	    }
	  },1500);
	  soundRecorder.st1 = setTimeout(function(){
			soundRecorder.startRecording();
	    $('.countdown').html('');
			$('#unik_mic_modal').removeClass('isCountdown');
	    $('#unik_mic_modal').addClass('isRecording');
	    $('.text').html('Nu spelas din röst in!');
	    clearInterval(soundRecorder.st1);
	  },4500);
	  soundRecorder.st2 = setTimeout(function() {
	    soundRecorder.timeElement.addClass('isShowing');
	    clearInterval(soundRecorder.st2);
	  },6500);

	},

	prettyTimeString: function(num) {
		return ( num < 10 ? "0" : "" ) + num;
	},

	secondsToMinutes: function(seconds) {
		var minutes = Math.floor(seconds / 60);
		seconds = Math.floor(seconds % 60);
		minutes = this.prettyTimeString(minutes);
		seconds = this.prettyTimeString(seconds);
		return minutes + ":" + seconds;
	},

	secondsToMinutesAlt: function(seconds) {
		var minutes = Math.floor(seconds / 60);
		if (minutes < 1) {
			return seconds + ' sekunder';
		}
		return '~ ' + minutes + ' minuter';
	}

};

































