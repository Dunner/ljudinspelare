

/*jshint unused:false */
/*global tinymce:true */

/*unik_mic_modal - umm - stageController - soundRecorder*/

var stageController = {};
var soundRecorder = {};
var MP3Recorder = null;

//Add TINYMCE toolbar button, and handle clicks on it
tinymce.PluginManager.add('unikumMicrophone', function(editor, url) {
	editor.url = editor.getParam("url");
	// Add a button that opens a window
	editor.addButton('unikumMicrophone', {
    icon: true,
    image: url + "/img/micicon.png",
    tooltip: 'Spela in ljud',
		onclick: function() {
			// Open window
			editor.windowManager.open({
				html: '<div id="unik_mic_modal"></div>',
				width: 600,
				height: 450,
			});
			renderUnikumMicrophone(editor, function() {
				stageController.transitionStage(0);
			});
		}
	});

	editor.on("touchstart click", function (e) {
		//Open modal to edit audioclip
		if (e.target.classList.contains('unikum_audio')) {
			editor.windowManager.open({
				html: '<div id="unik_mic_modal"></div>',
				width: 600,
				height: 450,
			});
			renderUnikumMicrophone(editor, function() {
        $.get('/libs/tinymce/plugins/unikumMicrophone/previewplayer.js', function(){
          PreviewPlayer.init($('.unikum_audioplayer'));
          PreviewPlayer.editorElement = e.target;
          stageController.transitionStage(3);
          PreviewPlayer.setBlobUrl(e.target.getAttribute('data-url'));
          PreviewPlayer.setName(e.target.getAttribute('data-name'));
          $('.uap_stage3_record_namechangeinput').val(PreviewPlayer.name);
          $('.uap_stage3_record_namechangeinput').focus();
        });

			});
		}
	});

	editor.on('keydown',function(e) {
    var node            = editor.selection.getNode();
    var range           = editor.selection.getRng();
    var startOffset     = range.startOffset;
    var currentWrapper  = range.endContainer.className;

    var selection = editor.selection.getRng();
    var selectionNode = editor.selection.getNode();
		var selectionContainer = selection.startContainer;
  	console.log(selectionNode);


    // if delete Keys pressed
    if ((e.keyCode == 8 || e.keyCode == 46) && selectionNode.classList.contains('unikum_audio')) {
    	triedToDeleteAudio(e).bind(this);}
    if ( selectionContainer.previousSibling ) {
    	if (e.keyCode == 8 && selectionContainer.previousSibling.classList.contains('unikum_audio')) {
	    	triedToDeleteAudio(e).bind(this)}}
    if ( selectionContainer.previousSibling ) {
    	if (e.keyCode == 46 && selectionContainer.nextSibling.classList.contains('unikum_audio')) {
				triedToDeleteAudio(e).bind(this)}}

   function triedToDeleteAudio(e) {
  	e.preventDefault();
  	e.stopPropagation();
  	return false;
   }
	});

});


/**
 * Renders the modal and fills it with the template and a few handlers, triggers viewLogic
 */

function renderUnikumMicrophone(editor, cb) {
	$.get('/libs/tinymce/plugins/unikumMicrophone/view/modal.html', function (template) {

    $('#unik_mic_modal').html(template);
		$('#umm_btn_restart').on('click', function(){
			stageController.transitionStage(0);
			soundRecorder.reset();});
		$('#umm_btn_cancel').on('click', function(){
			parent.tinymce.activeEditor.windowManager.close();
		});


		//Watch for filechange in fileinput (upload)
    $("#umm_fileinput").change(function () {
			soundRecorder.uploadFile();
    });


		setTimeout(function() {
			//Remove (some) tinymce styling on the modal
	  	editor.windowManager.windows[0].$el.removeClass('mce-container');
	  	editor.windowManager.windows[0].$el.addClass('unikum_mcemodal_fill');
			editor.windowManager.windows[0].$el.find(".mce-foot").css('display', 'none');
			editor.windowManager.windows[0].$el.find(".mce-window-head").css('display', 'none');
	    runViewLogic(editor);
			if (cb) return cb();
		},0)


  });

}


/**
 * Handles the modals different states/stages
 */

function runViewLogic(editor) {
	stageController = {
	  buttonWrapperEl: $('#umm_buttons'),
	  stages: [
	    {
        label: 'Record or upload?',
	      wrapperEl: $('#umm_stage0'),
        run: function(){
					$('.umm_stage0_rec_btn_start').on('click', function(){
						stageController.transitionStage(1)
					});
					//Simulate file upload click
					$('.umm_stage0_rec_btn_upload').on('click', function(){
						$('#umm_fileinput').val('');
						$('#umm_fileinput_label').trigger("click");
					});
					DeviceSupportHandling(function(){
						soundRecorder.reset();
					});
					stageController.elementsToUnbind.push(
						'.umm_stage0_rec_btn_start',
						'.umm_stage0_rec_btn_upload'
					);
				}
	    },
	    {
        label: 'Record',
	      wrapperEl: $('#umm_stage1'),
        run: function() {
					$('#unik_mic_modal').addClass('isRecordStage');
					$('.umm_stage1_start_countdown').on('click', function(){
						soundRecorder.startCountdown();
					});
					$('.umm_stage1_stop_recording').on('click', function(){
						// if (soundRecorder.recordingLength > 0) {
						soundRecorder.stopRecording(function(blob){
							if (blob && blob.size > 0) {
								stageController.transitionStage(2);
                console.log('setblob')
                PreviewPlayer.setBlob(blob);
							}
						});
						// }
					});
					$('.umm_stage1_cancel_recording').on('click', function(){
						soundRecorder.reset();
						stageController.transitionStage(0);
						soundRecorder.stopRecording();
					});
					stageController.elementsToUnbind.push(
						'.umm_stage1_start_countdown',
						'.umm_stage1_stop_recording',
						'.umm_stage1_cancel_recording'
					);
				}
	    },
	    {
        label: 'Preview/insert',
	      wrapperEl: $('#umm_stage2'),
        run: function() {
					$('.uap_stage2_record_nameinput').focus();
					$('.umm_stage2_insert_recording').on('click', function() {
						PreviewPlayer.giveName();
						stageController.insertAudio();
					});
					$('.uap_stage2_record_nameinput').on('keyup', function() {
						$(this).height( $(this).prop("scrollHeight")+'px' );
					});
					$('.umm_stage2_download_recording').on('click', function() {
						PreviewPlayer.saveAudioFile();
					});
					$('.umm_stage2_cancel_recording').on('click', function(){
						soundRecorder.reset();
						stageController.transitionStage(0);
					});
					stageController.elementsToUnbind.push(
						'.umm_stage2_insert_recording',
						'.umm_stage2_download_recording',
						'.umm_stage2_cancel_recording'
					);
				}
	    },
	    {
        label: 'Edit audioclip',
	      wrapperEl: $('#umm_stage3'),
        run: function() {
					$('.umm_stage3_update_recording').on('click', function() {
						stageController.changeAudio(PreviewPlayer.blobUrl, $('.uap_stage3_record_namechangeinput').val())
					});
					$('.uap_stage3_record_namechangeinput').on('keyup', function() {
						$(this).height( $(this).prop("scrollHeight")+'px' );
					});
					$('.umm_stage3_delete_recording').on('click', function() {
						soundRecorder.deleteFile(editor, PreviewPlayer.blobUrl,function(){
							PreviewPlayer.editorElement.remove();
							stageController.closeWindow();
						});
					});
					$('.umm_stage3_download_recording').on('click', function() {
						PreviewPlayer.saveAudioFile();
					});
					$('.umm_stage3_cancel_recording').on('click', function(){
						soundRecorder.reset();
						stageController.transitionStage(0);
					})
					stageController.elementsToUnbind.push(
						'.umm_stage3_update_recording',
						'.umm_stage3_delete_recording',
						'.umm_stage3_download_recording',
						'.umm_stage3_cancel_recording'
					);
				}
	    },
			{
        label: 'Not supported view',
	      wrapperEl: $('#umm_stage4'),
        run: function() {
					$('.umm_stage4_cancel_recording').on('click', function(){
						stageController.closeWindow();
					});
					$('.umm_stage4_open_video_recorder').on('click', function(){
						$('#umm_fileinput').val('');
						$('#umm_fileinput_label').trigger("click");
					});
					stageController.elementsToUnbind.push(
						'.umm_stage4_cancel_recording',
						'.umm_stage4_open_video_recorder'
					);
				}
	    },
			{
        label: 'IOS Special',
	      wrapperEl: $('#umm_stage5'),
        run: function() {
					$('.umm_stage5_open_video_recorder').on('click', function(){
						// $("#umm_fileinput").attr("capture", "camcorder");
						// $("#umm_fileinput").attr("accept", "video/*;capture=camcorder");
						$('#umm_fileinput').val('');
						$('#umm_fileinput_label').trigger("click");
					});
					$('.umm_stage5_cancel_recording').on('click', function(){
						stageController.closeWindow();
					});
					stageController.elementsToUnbind.push(
						'.umm_stage5_open_video_recorder',
						'.umm_stage5_cancel_recording'
					);
				}
	    },
			{
        label: 'File compression',
	      wrapperEl: $('#umm_stage6'),
        run: function() {
					$('.umm_stage6_cancel_recording').on('click', function(){
						stageController.closeWindow();
					});
					stageController.elementsToUnbind.push(
						'.umm_stage5_cancel_recording'
					);
				}
	    }
	  ],
	  insertAudio: function(blobUrl, name) {
      //insert Audio
			//win.getContentWindow().document.getElementById('content').value
			soundRecorder.sendFileToServer(editor,function(src){
        editor.insertContent(stageController.insertElementTemplate(src, PreviewPlayer.name));
				stageController.closeWindow();
			})

	  },
		changeAudio: function(blobUrl, name) {
      //change/save Audio
			//win.getContentWindow().document.getElementById('content').value
      $(PreviewPlayer.editorElement).replaceWith(stageController.insertElementTemplate(blobUrl, name));
			stageController.closeWindow();
	  },
		insertElementTemplate: function(blobUrl, name) {
			var duration = soundRecorder.secondsToMinutesAlt(Math.round(PreviewPlayer.audio.duration));
			return (
				'<p></p>'+
				'<div class="unikum_audio mceNonEditable" data-duration="'+duration+'" data-url="'+blobUrl+'" data-name="'+name+'">'+
					'<div class="uap_circle"></div>'+
		      '<div class="uap_txtinfo">'+name+'</div>'+
					'<span class="uap_duration">'+duration+'</span>'+
				'</div>'+
				'<p></p>'
			)
		},
	  transitionStage: function(nStage, event) {
	    // Change view/stage
			this.clearEvents();
	    stageController.stages.forEach(function(stage){
	      stage.wrapperEl.removeClass('isShowing');
	    });
	    stageController.stages[nStage].wrapperEl.addClass('isShowing');
      //run stage function
			$('#unik_mic_modal').removeClass();
      if (stageController.stages[nStage].run) {
        stageController.stages[nStage].run();
      }
	  },
		elementsToUnbind: [],
		clearEvents: function() {
			(this.elementsToUnbind).forEach(function(element){
				$(element).off();
			});
			elementsToUnbind = [];
		},
    closeWindow: function() {
      if (typeof PreviewPlayer !== 'undefined' && PreviewPlayer.audio) {PreviewPlayer.audio.pause();}
      var win = editor.windowManager.getWindows()[0];
      win.close();
    }
	};
}




function DeviceSupportHandling(cb) {


	if (!navigator.getUserMedia) {
		//It's not, check support
    navigator.getUserMedia = navigator.getUserMedia ||
                             navigator.webkitGetUserMedia ||
                             navigator.mozGetUserMedia ||
                             navigator.msGetUserMedia;
  };

	//All need
	$.get('/libs/tinymce/plugins/unikumMicrophone/mp3converter.js');
	$.get('/libs/tinymce/plugins/unikumMicrophone/wavconverter.js');
	$.get('/libs/tinymce/plugins/unikumMicrophone/previewplayer.js', function(){
		PreviewPlayer.init($('.unikum_audioplayer'));
	});
	$.get('/libs/tinymce/plugins/unikumMicrophone/lame.min.js', function() {

		if (navigator.getUserMedia) {
			//Full support!
			$.get('/libs/tinymce/plugins/unikumMicrophone/mp3encoder.js');
			$.get('/libs/tinymce/plugins/unikumMicrophone/mp3recorder.js', function(){
				soundRecorder.reset();
			});
	  } else {
			// No support for recording, Safari, IE ..
			stageController.transitionStage(4);
			if((navigator.userAgent.match(/iPhone/i)) || (navigator.userAgent.match(/iPad/i))) {
				//Is it an IOS unit? (iphone/Ipad)
				stageController.transitionStage(5);
				if (cb) cb();
			} else {
				if (cb) {cb();}
			}

		}

	});




}



/**
 * Handles actual sound recording, timers & such
 */


soundRecorder = {

  reset: function(){
    this.timeElement = $('#umm_record_time');
    this.timer = 'START';
    $('.masker').height(0+'px');
    $('.indicator').height(0+'px');
    if (this.timeInterval) {clearInterval(this.timeInterval);}
		this.timeInterval = undefined;
    this.stopTimer();
		this.setTimer(this.timer);
    this.clearCountdown();
    if (this.recorder) {this.recorder.stop();this.recorder.destroy();}
		if (MP3Recorder) {
			this.recorder = new MP3Recorder({
	      bitRate: 128
	    });
		}

  },

  startRecording: function() {
    this.startTimer()
    this.recorder.initialize()
    this.recorder.start();
  },

  stopRecording: function(cb) {
    this.recorder.getMp3Blob(function(blob){
      if (cb && blob && blob.size > 0) {
				this.stop();
				cb(blob);
				soundRecorder.reset();
			}
    })
  },

  visualize: function(array) {
    var size_buffer = array.length;
    var max_index = 1;
    for (var index = 0; index < max_index && index < size_buffer; index += 1) {
      var val = Math.round(array[index] * 100);
      if (val !== 0 && val > 0) {
        $('.masker').height(val*1.5+'%');
        $('.indicator').height(50+val+'%');
      }
    }
  },

  convertProgress: function(percent) {
  	$('.umm_convert_progress_inside').width(percent+'%');
  	$('.umm_convert_progress span').text(percent+'%');
  },

  startTimer: function() {
    var start = new Date;
    soundRecorder.timer = '00:00';
    soundRecorder.setTimer();
    soundRecorder.timeInterval = setInterval(function() {
      var total_seconds = (new Date - start) / 1000;
      total_seconds = total_seconds % 3600;
			soundRecorder.timer = soundRecorder.secondsToMinutes(total_seconds);
      soundRecorder.setTimer();
    }, 1000);
  },

  stopTimer: function() {
    soundRecorder.timer = 'START';
    soundRecorder.setTimer();
		soundRecorder.clearCountdown();
    clearInterval(soundRecorder.timeInterval);
  },

  setTimer: function() {
    soundRecorder.timeElement.html(soundRecorder.timer);
  },

	st1: undefined,
	st2: undefined,
	countDownInterval: undefined,
	clearCountdown: function() {
		$('.text').html('');
		$('#unik_mic_modal').addClass('isCountdown');
	  $('#unik_mic_modal').removeClass('isRecording');
	  soundRecorder.timeElement.removeClass('isShowing');
		if(soundRecorder.countDownInterval) {clearInterval(soundRecorder.countDownInterval);}
	  if(soundRecorder.st1) {clearInterval(soundRecorder.st1);}
	  if(soundRecorder.st2) {clearInterval(soundRecorder.st2);}
	},

	startCountdown: function() {
		soundRecorder.clearCountdown();

	  function replaceCountdown(n) {
	    var clone = $('.countdown').clone();
	    clone.html(n);
	    $('.countdown').replaceWith(clone);
	  }

		var timeleft = 3;
		replaceCountdown(timeleft);
		$('.text').html('Räknar ner');
	  soundRecorder.countDownInterval = setInterval(function(){
	    timeleft--;
	    replaceCountdown(timeleft);
	    if(timeleft <= 0) {
	      clearInterval(soundRecorder.countDownInterval);
	    }
	  },1500);
	  soundRecorder.st1 = setTimeout(function(){
			soundRecorder.startRecording();
	    $('.countdown').html('');
			$('#unik_mic_modal').removeClass('isCountdown');
	    $('#unik_mic_modal').addClass('isRecording');
	    $('.text').html('Nu spelas din röst in!');
	    clearInterval(soundRecorder.st1);
	  },4500);
	  soundRecorder.st2 = setTimeout(function() {
	    soundRecorder.timeElement.addClass('isShowing');
	    clearInterval(soundRecorder.st2);
	  },6500);

	},

	prettyTimeString: function(num) {
		return ( num < 10 ? "0" : "" ) + num;
	},

	secondsToMinutes: function(seconds) {
		var minutes = Math.floor(seconds / 60);
		seconds = Math.floor(seconds % 60);
		minutes = this.prettyTimeString(minutes);
		seconds = this.prettyTimeString(seconds);
		return minutes + ":" + seconds;
	},

	secondsToMinutesAlt: function(seconds) {
		var minutes = Math.floor(seconds / 60);
		if (minutes < 1) {
			return seconds + ' sekunder';
		}
		return '~ ' + minutes + ' minuter';
	},

	uploadFile: function() {
		$('.umm_stage0_rec_btn_upload').addClass('umm_rec_btn_uploading');
		var file = $("#umm_fileinput")[0].files[0];
		MP3Transformer.transform(file, function(message, newBlob) {

			if (message == 'error') {
				// -----
				PreviewPlayer.reset();
	      $('.umm_stage0_rec_btn_upload').removeClass('umm_rec_btn_uploading');
	      console.log('error uploading file');
			};

			if (message == 'upload') {
				// -----
				$('.umm_stage0_rec_btn_upload').addClass('umm_rec_btn_uploading');
			};

			if (message == 'converting') {
				stageController.transitionStage(6);
				
			}
			if (message == 'cantconvert') {
				stageController.transitionStage(6);
			}

			if (message == 'unchanged') {
				// -----
	      $('.umm_stage0_rec_btn_upload').removeClass('umm_rec_btn_uploading');
	      console.log('error uploading file');
				stageController.transitionStage(2);
        PreviewPlayer.setBlob(newBlob);
        PreviewPlayer.setName(file.name);
			};

			if (message == 'done') {
				// -----
				setTimeout(function(){
					$('.umm_stage0_rec_btn_upload').removeClass('umm_rec_btn_uploading');
				},1000)
				stageController.transitionStage(2);
        PreviewPlayer.setBlob(newBlob);
        PreviewPlayer.setName(file.name);
			};

		});
	},

	sendFileToServer: function(editor, cb) {
		var blob = PreviewPlayer.blob;
		blob.name = PreviewPlayer.name;
		blob.lastModifiedDate = new Date();
		var formData = new FormData();
		formData.append('audioFile', blob, blob.name+'.mp3');

		var xhr = new XMLHttpRequest();
		xhr.open('POST',
			'saveBlogAttachment.ajax?' +
			'blog_id=' + editor.blogId +
			'&__pid=' + editor.principleId
			,true);
		xhr.onload = function () {
			if (xhr.status === 200) {
				var jqA = $('.jq-attachments.jq-files')
				var a = jqA.append(xhr.response);
				var audiosrc = jqA.find('li:last-child a')[0].href;
				if (cb) cb(audiosrc);
			} else {
				console.log("Woopsie");
			}
		}.bind(this);

		xhr.send(formData);
	},

	deleteFile(editor, url, cb) {
		var attId;
		var attEl;
		var jqA = $('.jq-attachments.jq-files');
		var attachmentLinks = jqA.find('a');
		for (var i = 0; i < attachmentLinks.length; i++) {
			if(attachmentLinks[i].href == url) {
				attEl = $(attachmentLinks[i]).parent();
				attId = attEl.attr('id').split('_')[2];
			}
		}

		swco({title: vocab.DELETE_ATTACHMENT, text: vocab.CONFIRM_DELETE_ATTACHMENT},
			function (confirmed) {
				if (confirmed) {
					var xhr = new XMLHttpRequest();
					xhr.open('GET',
						'edit/deleteAttachment.ajax?' +
						'attId=' + attId +
						'&__pid=' + editor.principleId
						,true);
					xhr.onload = function () {
						if (xhr.status === 200) {
							$(attEl).remove();
							if (cb) cb(attId);
						} else {
							if (cb && !attId) cb();
						}
					}.bind(this);
					xhr.send();
				}
			});


	}
};
